// Code generated by entproto. DO NOT EDIT.
syntax = "proto3";

package admin.v1;

import "google/api/annotations.proto";

import "validate/validate.proto";

import "openapiv3/annotations.proto";

import "google/protobuf/empty.proto";

import "google/protobuf/wrappers.proto";

option go_package = "github.com/ZQCard/kbk-bff-admin/api/bff-admin/v1;v1";

option (openapi.v3.document) = {
    info: {
        title: "管理后台bff",
        version: "0.0.1",
        contact: {
            name: "qi.zhou",
            url: "",
            email: "445864742@qq.com"
        },
        description: "管理后台bff";
    },
};

// 管理后台服务
service Admin {
    //-------------------------- 管理员服务 ----------------------------------------//
    // 管理员登陆
	rpc Login(LoginReq) returns (LoginRes) {
		option (google.api.http) = {
			post : "/admin/v1/login"
			body : "*"
		};
	};
	// 管理员退出
	rpc LoginOut(google.protobuf.Empty) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			post : "/admin/v1/logout"
			body : "*"
		};
	};

    // 管理员列表
    rpc GetAdministratorList (GetAdministratorListReq) returns (GetAdministratorListPageRes){
        option (google.api.http) = {
            get:"/admin/v1/administrators"
        };
    };

    // 管理员详情
    rpc GetAdministrator (IdReq) returns (Administrator){
        option (google.api.http) = {
            get:"/admin/v1/administrator"
        };
    };

    // 获取当前请求管理员信息
    rpc GetAdministratorInfo (google.protobuf.Empty) returns (Administrator){
        option (google.api.http) = {
            get:"/admin/v1/administratorInfo"
        };
    };
    
    // 管理员创建
	rpc CreateAdministrator (CreateAdministratorReq) returns (Administrator){
		option (google.api.http) = {
			post : "/admin/v1/administrator"
			body : "*"
		};
	};

    // 管理员更新
	rpc UpdateAdministrator (UpdateAdministratorReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			put : "/admin/v1/administrator"
			body : "*"
		};
	};
	// 管理员删除
	rpc DeleteAdministrator (IdReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			delete : "/admin/v1/administrator"
		};
	};
	// 管理员恢复
	rpc RecoverAdministrator (IdReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			patch : "/admin/v1/administrator"
			body : "*"
		};
	};
	// 管理员禁用
	rpc forbidAdministrator (IdReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			patch : "/admin/v1/administrator/forbid"
			body : "*"
		};
	};
	// 管理员解禁
	rpc approveAdministrator (IdReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			patch : "/admin/v1/administrator/approve"
			body : "*"
		};
	};
    //-------------------------- 权限服务 ----------------------------------------//
    // 权限 —— 角色列表
	rpc GetRoleAll (google.protobuf.Empty) returns (GetRoleAllRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/roles",
		};
	};

	// 权限 —— 角色创建
	rpc CreateRole (CreateRoleReq) returns (Role){
		option (google.api.http) = {
			post : "/admin/v1/authorization/role",
			body : "*"
		};
	};

	// 权限 —— 角色更新
	rpc UpdateRole (UpdateRoleReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			put : "/admin/v1/authorization/role"
			body : "*"
		};
	};

	// 权限 —— 角色删除
	rpc DeleteRole (IdReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			delete : "/admin/v1/authorization/role"
		};
	};

	// 权限 —— 设置用户角色关系
	rpc SetRolesForUser (SetRolesForUserReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			post : "/admin/v1/authorization/setRolesForUser"
			body : "*"
		};
	};

	// 权限 —— 获取用户角色列表
	rpc GetRolesForUser (GetRolesForUserReq) returns (GetRolesForUserRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/getRolesForUser"
		};
	};

	// 权限 —— 获取角色用户列表
	rpc GetUsersForRole (RoleNameReq) returns (GetUsersForRoleRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/getUsersForRole"
		};
	};

	// 权限 —— 删除用户某个角色
	rpc DeleteRoleForUser (DeleteRoleForUserReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			delete : "/admin/v1/authorization/deleteRoleForUser"
		};
	};

	// 权限 —— 删除用户所有角色
	rpc DeleteRolesForUser (DeleteRolesForUserReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			delete : "/admin/v1/authorization/deleteRolesForUser"
		};
	};

    // 策略授权规则 - 列表
	rpc GetPolicies (RoleNameReq) returns (GetPoliciesRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/getPolicies"
		};
	};
	// 权限 —— 策略授权规则 - 更新
	rpc UpdatePolicies (UpdatePoliciesReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			post : "admin/v1/authorization/updatePolicies"
			body : "*"
		};
	};

    // 权限 —— 所有Api列表
	rpc GetApiAll (google.protobuf.Empty) returns (GetApiAllRes){
        option (google.api.http) = {
			get : "/admin/v1/authorization/apiAll"
		};
    };

	// 权限 —— Api列表
	rpc GetApiList (GetApiListReq) returns (GetApiListRes){
        option (google.api.http) = {
			get : "/admin/v1/authorization/api"
		};
    };

	// 权限 —— Api创建
	rpc CreateApi (CreateApiReq) returns (Api){
        option (google.api.http) = {
			post : "admin/v1/authorization/api"
			body : "*"
		};
    };

	// 权限 —— Api更新
	rpc UpdateApi (UpdateApiReq) returns (google.protobuf.Empty){
        option (google.api.http) = {
			put : "admin/v1/authorization/api"
			body : "*"
		};
    };

	// 权限 —— Api删除
	rpc DeleteApi (IdReq) returns (google.protobuf.Empty){
        option (google.api.http) = {
			delete : "/admin/v1/authorization/api"
		};
    };

	// 权限 —— 所有Menu列表
	rpc GetMenuAll (google.protobuf.Empty) returns (GetMenuTreeRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/menuAll"
		};
	};
	// 权限 —— Menu列表
	rpc GetMenuTree (google.protobuf.Empty) returns (GetMenuTreeRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/menuTree"
		};
	};

	// 权限 —— Menu创建
	rpc CreateMenu (CreateMenuReq) returns (Menu){
		option (google.api.http) = {
			post : "/admin/v1/authorization/menu"
			body : "*"
		};
	};

	// 权限 —— Menu更新
	rpc UpdateMenu (UpdateMenuReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			put : "/admin/v1/authorization/menu"
			body : "*"
		};
	};

	// 权限 —— Menu删除
	rpc DeleteMenu (IdReq) returns (google.protobuf.Empty){
		option (google.api.http) = {
			delete : "/admin/v1/authorization/menu"
		};
	};

	// 权限 —— 角色菜单列表树
	rpc GetRoleMenuTree (RoleNameReq) returns (GetMenuTreeRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/roleMenuTree"
		};
	};

	// 权限 —— 角色菜单列表
	rpc GetRoleMenu (RoleNameReq) returns (GetMenuTreeRes){
		option (google.api.http) = {
			get : "/admin/v1/authorization/roleMenu"
		};
	};

	// 权限 —— 角色菜单更新
	rpc SetRoleMenu (SetRoleMenuReq) returns (google.protobuf.Empty){
		option (google.api.http) = { 
            post:"/admin/v1/authorization/roleMenu"  
            body:"*"
        };
	};

	// 权限 —— 获取角色菜单按钮列表
	rpc GetRoleMenuBtn (GetRoleMenuBtnReq) returns (GetRoleMenuBtnRes){
		option (google.api.http) = { 
            get:"/admin/v1/authorization/roleMenuBtn"  
        };
	};
	// 权限 —— 保存角色菜单按钮列表
	rpc SetRoleMenuBtn (SetRoleMenuBtnReq) returns (google.protobuf.Empty){
		option (google.api.http) = { 
            post:"/admin/v1/authorization/roleMenuBtn"  
            body:"*"
        };
	};
    //-------------------------- 日志服务 ----------------------------------------//
	// 日志 —— 列表
	rpc GetApiLogList(GetApiLogListReq) returns(GetApiLogListRes){
        option (google.api.http) = { 
            get:"/admin/v1/log/list"
        };
    };
    //-------------------------- OSS服务 ----------------------------------------//

    // 文件 ——  OSS STSTOKEN 获取
	rpc GetOssStsToken(google.protobuf.Empty) returns(OssStsTokenResponse){
        option (google.api.http) = { 
            get:"/admin/v1/oss/token"
        };
    };
}

// 请求-管理员登录
message LoginReq {
	// 用户名
	string username = 1[
        (validate.rules).string = {
            pattern:   "^[a-zA-Z][a-zA-Z0-9_]{3,15}$",
            min_len: 4, 
            max_len: 20
        }    
    ];
    // 密码
	string password = 2[
        (validate.rules).string = {
            min_len: 6
        }    
    ];
}

// 响应-管理员登录Token
message LoginRes {
    // token
	string token = 1;
}

// 响应-管理员
message Administrator {
    // id
	int64 id = 1;
    // 用户名
	string username = 2;
    // 手机号
	string mobile = 3;
    // 昵称
	string nickname = 4;
    // 头像
	string avatar = 5;
    // 状态 true正常 false冻结
	bool status = 6;
    // 角色
	string role = 7;
    // 上次登录时间
	string last_login_time = 8;
    // 上次登录ip
	string last_login_ip = 9;
    // 创建时间
	string created_at = 10;
    // 更新时间
	string updated_at = 11;
    // 删除时间
	string deleted_at = 12;
}


// 请求 - 管理员列表
message GetAdministratorListReq {
    // 页码
	int64 page = 1[
        (validate.rules).int64.gt = 0
    ];
    // 页记录数
	int64 page_size = 2[
        (validate.rules).int64.gt = 0
    ];
    // 用户名
	string username = 3;
    // 手机号
	string mobile = 4;
    // 昵称
	string nickname = 5;
    // 状态 1正常 0冻结
	google.protobuf.BoolValue status = 6;
    // 创建开始时间
	string created_at_start = 7;
    // 创建结束时间
	string created_at_end = 8;
}

// 请求 - 管理员分页
message GetAdministratorListPageRes {
    // 总记录数
	int64 total = 1;
    // 列表
	repeated Administrator list = 2;
}

// 请求 - 管理员创建
message CreateAdministratorReq {
    // 用户名
	string username = 1[
        (validate.rules).string = {
            pattern:   "^[a-zA-Z][a-zA-Z0-9_]{3,15}$",
            min_len: 4, 
            max_len: 20
        }    
    ];
    // 密码
	string password = 2[
        (validate.rules).string = {
            min_len: 6
        }    
    ];
    // 手机号
	string mobile = 3[
        (validate.rules).string = {
            pattern:   "^1[0-9]{10}$",
        }    
    ];
    // 昵称
	string nickname = 4[
        (validate.rules).string = {
            min_len: 1, 
            max_len: 20
        }    
    ];
    // 头像
	string avatar = 5[
        (validate.rules).string = {
            min_len: 1, 
            max_len: 255
        }    
    ];
    // 状态 true正常 false冻结
	bool status = 6;
    // 当前角色数组,默认第一个为当前角色
	repeated string role = 7[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 请求 - 管理员更新
message UpdateAdministratorReq {
	int64 id = 1[
        (validate.rules).int64.gt = 0
    ];
	// 用户名
	string username = 2[
        (validate.rules).string = {
            pattern:   "^[a-zA-Z][a-zA-Z0-9_]{3,15}$",
            min_len: 4, 
            max_len: 20
        }    
    ];
    // 密码
	string password = 3[
        (validate.rules).string = {
            min_len: 6
        }    
    ];
    // 手机号
	string mobile = 4[
        (validate.rules).string = {
            pattern:   "^1[0-9]{10}$",
        }    
    ];
    // 昵称
	string nickname = 5[
        (validate.rules).string = {
            min_len: 1, 
            max_len: 20
        }    
    ];
    // 头像
	string avatar = 6[
        (validate.rules).string = {
            min_len: 1, 
            max_len: 255
        }    
    ];
    // 状态 true正常 false冻结
	bool status = 7;
    // 当前角色数组,默认第一个为当前角色
	repeated string role = 8[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 请求 - id主键
message IdReq {
	// 主键id
	int64 id = 1;
}

// 获取角色列表
message GetRoleAllRes {
	repeated Role list = 1;
}

// 响应 - 角色信息
message Role {
    // 主键id
    int64 id = 1;
    // 名称
    string name = 2;
    string created_at = 4;
    // 更新时间
    string updated_at = 5;
}

// 请求 - 角色创建
message CreateRoleReq {
    // 名称
    string name = 1 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 角色更新
message UpdateRoleReq {
    // 主键id
    int64 id = 1 [
        (validate.rules).int64.gt = 0
    ];
    // 名称
    string name = 2 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 设置用户角色
message SetRolesForUserReq {
    // 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 角色数组
	repeated string roles = 2[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 请求 - 获取用户角色列表
message GetRolesForUserReq {
    // 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 响应 - 用户角色列表
message GetRolesForUserRes {
	// 角色数组
	repeated string roles = 1;
}

// 请求 - 角色名称
message RoleNameReq {
    string role = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 响应 - 角色用户列表
message GetUsersForRoleRes {
	// 用户列表
	repeated string users = 1;
}

// 请求 - 删除用户(单个)角色
message DeleteRoleForUserReq{
	// 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 角色名
	string role = 2[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 删除用户(全部)角色
message DeleteRolesForUserReq{
	// 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 响应 - 权限策略
message PolicyRules {
	// operation路径
	string path = 1;
	// 请求方式
	string method = 2;
}

// 请求 - 权限策略更新
message UpdatePoliciesReq {
	// 角色名
	string role = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 权限策略
	repeated PolicyRules policyRules = 2[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 响应 - 权限策略列表
message GetPoliciesRes{
	repeated PolicyRules policyRules = 1;
}

// 响应 - API信息
message Api {
    // 主键id
    int64 id = 1;
    // 名称
    string name = 2;
     // 分组
     string group = 3;
     // 请求方式
    string method = 4;
     // 请求路径
    string path = 5;
    // 创建时间
    string created_at = 6;
    // 更新时间
    string updated_at = 7;
}

// 请求 - API分页列表
message  GetApiListReq {
    // 页码
    int64 page = 1 [
        (validate.rules).int64.gt = 0
    ];

    // 页记录数
    int64 page_size = 2 [
        (validate.rules).int64.gt = 0
    ];
    // 名称
    string name = 3;
    // 分组
    string group = 4;
    // 请求方式
    string method = 5;
    // 请求路径
    string path = 6;
}

// 响应 - api列表(全部)
message GetApiAllRes {
	// 列表
	repeated Api list = 1;
}

// 响应 - API分页
message  GetApiListRes {
    // 总数
    int64 total = 1;
    // 列表
    repeated Api list = 2;
}



// 请求 - API创建
message CreateApiReq {
    // 名称
    string name = 1 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 分组
    string group = 2 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求方式
    string method = 3 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求路径
    string path = 4 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}


// 请求 - API更新
message UpdateApiReq {
    // 主键id
    int64 id = 1 [
        (validate.rules).int64.gt = 0
    ];
    // 名称
    string name = 2 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 分组
    string group = 3 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求方式
    string method = 4 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求路径
    string path = 5 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 获取菜单树
// 响应 - 菜单树列表
message GetMenuTreeRes {
    // 菜单列表
	repeated Menu list = 1;
}

// 响应 - 菜单详情
message Menu {
	// 主键id
	int64 id = 1;
	// 父级id
	int64 parent_id = 2;
	// 前端路径
	string path = 3;
	// 菜单名
	string name = 4;
	// 是否隐藏
	bool hidden = 5;
	// 前端文件路径
	string component = 6;
	// 排序
	int64 sort = 7;
	// 页面名称
	string title = 8;
	// 菜单图标
	string icon = 9;
    // 创建时间
    string created_at = 10;
    // 更新时间
    string updated_at = 11;
	// 子菜单
	repeated Menu children = 12;
	// 菜单按钮列表
	repeated MenuBtn menuBtns = 13;
	// 父级id字符串 英文逗号分割
	string parent_ids = 14;
}

// 响应 - 菜单按钮详情
message MenuBtn {
	// 主键id
	int64 id = 1;
	// 菜单id
	int64 menu_id = 2;
	// 按钮名称
	string name = 3;
	// 描述
	string description = 4;
	// 英文标识
	string identifier = 5;
    // 创建时间
    string created_at = 6;
    // 更新时间
    string updated_at = 7;
}

// 请求 - 菜单创建
message CreateMenuReq {
	// 父级id
	int64 parent_id = 2;
	// 前端路径
	string path = 3[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单名
	string name = 4[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 是否隐藏
	bool hidden = 5;
	// 前端文件路径
	string component = 6[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 排序
	int64 sort = 7[
        (validate.rules).int64.gt = 0
    ];
	// 页面名称
	string title = 8[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单图标
	string icon = 9[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单按钮列表
	repeated MenuBtn menuBtns = 13;
	// 父级id字符串 英文逗号分割
	string parent_ids = 14[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}


// 请求 - 菜单更新
message UpdateMenuReq {
    // 主键id
	int64 id = 1[
        (validate.rules).int64.gt = 0
    ];
	// 父级id
	int64 parent_id = 2;
	// 前端路径
	string path = 3[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单名
	string name = 4[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 是否隐藏
	bool hidden = 5;
	// 前端文件路径
	string component = 6[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 排序
	int64 sort = 7[
        (validate.rules).int64.gt = 0
    ];
	// 页面名称
	string title = 8[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单图标
	string icon = 9[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单按钮列表
	repeated MenuBtn menuBtns = 13;
	// 父级id字符串 英文逗号分割
	string parent_ids = 14[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 设置角色菜单
message SetRoleMenuReq{
	// 角色id
	int64 role_id = 1[
        (validate.rules).int64.gt = 0
    ];
    // 菜单id数组
	repeated int64 menu_ids = 2[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 请求 - 获取角色菜单按钮
message GetRoleMenuBtnReq {
    // 角色id
	int64 role_id = 1;
    // 角色名称
    string role_name = 2;
    // 菜单id
	int64 menu_id = 3;
}

// 响应 - 角色菜单按钮列表
message GetRoleMenuBtnRes {
    // 菜单按钮列表
	repeated MenuBtn list = 1;
}

// 请求 - 角色菜单按钮保存
message SetRoleMenuBtnReq {
    // 角色id
	int64 role_id = 1[
        (validate.rules).int64.gt = 0
    ];
    // 菜单id
	int64 menu_id = 2[
        (validate.rules).int64.gt = 0
    ];
    // 按钮id数组
	repeated int64 menu_btn_ids = 3[
        (validate.rules).repeated.min_items = 1    
    ];
}


// 请求 - 日志列表
message  GetApiLogListReq {
    // 页码
    int64 page = 1 [
        (validate.rules).int64.gt = 0
    ];

    // 页记录数
    int64 page_size = 2 [
        (validate.rules).int64.gt = 0
    ];

         // 名称
     string name = 3;
     // userId
     string user_id = 4;
     // 用户名
     string username = 5;
     // 角色
     string role = 6;
     // 路径
     string operation = 7;
     // ip
     string ip = 8;
     // trace_id
     string trace_id = 9;
}

// 响应 - 日志
message ApiLog {
   // 日志id
   int64 id = 1;
   // trace id
   string trace_id = 2;
   // http/rpc
   string component = 3;
   // kratos操作路径
   string operation = 5;
   // 用户id
   string user_id = 6;
   // 请求方式
   string method = 7;
   // 请求路径
   string path = 8;
   // 请求内容
   string request = 9;
   // 响应内容
   string code = 10;
   // 提示信息
   string reason = 11;
   // 请求ip
   string ip = 12;
   // 创建时间 
   string created_at = 13;
   // 域
   string domain = 14;
   // 名称
   string name = 15;
   // 响应时长
  string latency = 16;
  // 用户名
  string username = 17;
  // 角色
  string role = 18;
}

// 响应 - 日志列表
message GetApiLogListRes {
    // 总数
    int64 total = 1;
    // 列表
    repeated ApiLog list = 2;
}

// 响应 - OSS前端直传信息
message OssStsTokenResponse {
    // access_key
    string access_key = 1;
    // access_secret
	string access_secret = 2;
    // 过期时间
	string expiration = 3;
    // 安全令牌
	string security_token = 4;
    // 终端
	string end_point = 5;
    // 存储桶
	string bucket_name = 6;
	// 区域
    string region = 7;
    // url
	string url = 8;
}

// 请求 - 文件上传
message UploadFileRequest {
	string file_name = 1[(validate.rules).string = {min_len: 1, max_len: 255}];
	string file_type = 2[(validate.rules).string = {in: ["jpg", "png", "jpeg"]}];
	bytes content = 3[(validate.rules).bytes.min_len = 1];
}

// 响应 - 文件上传url
message UploadFileResponse {
	string url = 1;
}

message ErrorMessageRes{
    string message = 1;
}


// 响应 - 钱包信息
message Wallet {
    // 主键id
    int64 id = 1;
    // 用户id
    int64 user_id = 2;
    // 状态
    bool status = 3;
    // 创建时间
    string created_at = 4;
    // 更新时间
    string updated_at = 5;
    // 删除时间
    string deleted_at = 6;
    // 余额
    float balance = 7;
    // 冻结金额
    float frozen_amount = 8;
}
