// Code generated by entproto. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0--rc1
// source: bff-admin/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_Login_FullMethodName                = "/admin.v1.Admin/Login"
	Admin_LoginOut_FullMethodName             = "/admin.v1.Admin/LoginOut"
	Admin_GetAdministratorList_FullMethodName = "/admin.v1.Admin/GetAdministratorList"
	Admin_GetAdministrator_FullMethodName     = "/admin.v1.Admin/GetAdministrator"
	Admin_GetAdministratorInfo_FullMethodName = "/admin.v1.Admin/GetAdministratorInfo"
	Admin_CreateAdministrator_FullMethodName  = "/admin.v1.Admin/CreateAdministrator"
	Admin_UpdateAdministrator_FullMethodName  = "/admin.v1.Admin/UpdateAdministrator"
	Admin_DeleteAdministrator_FullMethodName  = "/admin.v1.Admin/DeleteAdministrator"
	Admin_RecoverAdministrator_FullMethodName = "/admin.v1.Admin/RecoverAdministrator"
	Admin_ForbidAdministrator_FullMethodName  = "/admin.v1.Admin/forbidAdministrator"
	Admin_ApproveAdministrator_FullMethodName = "/admin.v1.Admin/approveAdministrator"
	Admin_GetRoleAll_FullMethodName           = "/admin.v1.Admin/GetRoleAll"
	Admin_CreateRole_FullMethodName           = "/admin.v1.Admin/CreateRole"
	Admin_UpdateRole_FullMethodName           = "/admin.v1.Admin/UpdateRole"
	Admin_DeleteRole_FullMethodName           = "/admin.v1.Admin/DeleteRole"
	Admin_SetRolesForUser_FullMethodName      = "/admin.v1.Admin/SetRolesForUser"
	Admin_GetRolesForUser_FullMethodName      = "/admin.v1.Admin/GetRolesForUser"
	Admin_GetUsersForRole_FullMethodName      = "/admin.v1.Admin/GetUsersForRole"
	Admin_DeleteRoleForUser_FullMethodName    = "/admin.v1.Admin/DeleteRoleForUser"
	Admin_DeleteRolesForUser_FullMethodName   = "/admin.v1.Admin/DeleteRolesForUser"
	Admin_GetPolicies_FullMethodName          = "/admin.v1.Admin/GetPolicies"
	Admin_UpdatePolicies_FullMethodName       = "/admin.v1.Admin/UpdatePolicies"
	Admin_GetApiAll_FullMethodName            = "/admin.v1.Admin/GetApiAll"
	Admin_GetApiList_FullMethodName           = "/admin.v1.Admin/GetApiList"
	Admin_CreateApi_FullMethodName            = "/admin.v1.Admin/CreateApi"
	Admin_UpdateApi_FullMethodName            = "/admin.v1.Admin/UpdateApi"
	Admin_DeleteApi_FullMethodName            = "/admin.v1.Admin/DeleteApi"
	Admin_GetMenuAll_FullMethodName           = "/admin.v1.Admin/GetMenuAll"
	Admin_GetMenuTree_FullMethodName          = "/admin.v1.Admin/GetMenuTree"
	Admin_CreateMenu_FullMethodName           = "/admin.v1.Admin/CreateMenu"
	Admin_UpdateMenu_FullMethodName           = "/admin.v1.Admin/UpdateMenu"
	Admin_DeleteMenu_FullMethodName           = "/admin.v1.Admin/DeleteMenu"
	Admin_GetRoleMenuTree_FullMethodName      = "/admin.v1.Admin/GetRoleMenuTree"
	Admin_GetRoleMenu_FullMethodName          = "/admin.v1.Admin/GetRoleMenu"
	Admin_SetRoleMenu_FullMethodName          = "/admin.v1.Admin/SetRoleMenu"
	Admin_GetRoleMenuBtn_FullMethodName       = "/admin.v1.Admin/GetRoleMenuBtn"
	Admin_SetRoleMenuBtn_FullMethodName       = "/admin.v1.Admin/SetRoleMenuBtn"
	Admin_GetApiLogList_FullMethodName        = "/admin.v1.Admin/GetApiLogList"
	Admin_GetOssStsToken_FullMethodName       = "/admin.v1.Admin/GetOssStsToken"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// -------------------------- 管理员服务 ----------------------------------------//
	// 管理员登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	// 管理员退出
	LoginOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 管理员列表
	GetAdministratorList(ctx context.Context, in *GetAdministratorListReq, opts ...grpc.CallOption) (*GetAdministratorListPageRes, error)
	// 管理员详情
	GetAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Administrator, error)
	// 获取当前请求管理员信息
	GetAdministratorInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Administrator, error)
	// 管理员创建
	CreateAdministrator(ctx context.Context, in *CreateAdministratorReq, opts ...grpc.CallOption) (*Administrator, error)
	// 管理员更新
	UpdateAdministrator(ctx context.Context, in *UpdateAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 管理员删除
	DeleteAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 管理员恢复
	RecoverAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 管理员禁用
	ForbidAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 管理员解禁
	ApproveAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// -------------------------- 权限服务 ----------------------------------------//
	// 权限 —— 角色列表
	GetRoleAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleAllRes, error)
	// 权限 —— 角色创建
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*Role, error)
	// 权限 —— 角色更新
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 角色删除
	DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 设置用户角色关系
	SetRolesForUser(ctx context.Context, in *SetRolesForUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 获取用户角色列表
	GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...grpc.CallOption) (*GetRolesForUserRes, error)
	// 权限 —— 获取角色用户列表
	GetUsersForRole(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetUsersForRoleRes, error)
	// 权限 —— 删除用户某个角色
	DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 删除用户所有角色
	DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 策略授权规则 - 列表
	GetPolicies(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetPoliciesRes, error)
	// 权限 —— 策略授权规则 - 更新
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 所有Api列表
	GetApiAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApiAllRes, error)
	// 权限 —— Api列表
	GetApiList(ctx context.Context, in *GetApiListReq, opts ...grpc.CallOption) (*GetApiListRes, error)
	// 权限 —— Api创建
	CreateApi(ctx context.Context, in *CreateApiReq, opts ...grpc.CallOption) (*Api, error)
	// 权限 —— Api更新
	UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— Api删除
	DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 所有Menu列表
	GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 权限 —— Menu列表
	GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 权限 —— Menu创建
	CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*Menu, error)
	// 权限 —— Menu更新
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— Menu删除
	DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 角色菜单列表树
	GetRoleMenuTree(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 权限 —— 角色菜单列表
	GetRoleMenu(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 权限 —— 角色菜单更新
	SetRoleMenu(ctx context.Context, in *SetRoleMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 权限 —— 获取角色菜单按钮列表
	GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnReq, opts ...grpc.CallOption) (*GetRoleMenuBtnRes, error)
	// 权限 —— 保存角色菜单按钮列表
	SetRoleMenuBtn(ctx context.Context, in *SetRoleMenuBtnReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// -------------------------- 日志服务 ----------------------------------------//
	// 日志 —— 列表
	GetApiLogList(ctx context.Context, in *GetApiLogListReq, opts ...grpc.CallOption) (*GetApiLogListRes, error)
	// 文件 ——  OSS STSTOKEN 获取
	GetOssStsToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OssStsTokenResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, Admin_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LoginOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_LoginOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdministratorList(ctx context.Context, in *GetAdministratorListReq, opts ...grpc.CallOption) (*GetAdministratorListPageRes, error) {
	out := new(GetAdministratorListPageRes)
	err := c.cc.Invoke(ctx, Admin_GetAdministratorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Administrator, error) {
	out := new(Administrator)
	err := c.cc.Invoke(ctx, Admin_GetAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdministratorInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Administrator, error) {
	out := new(Administrator)
	err := c.cc.Invoke(ctx, Admin_GetAdministratorInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateAdministrator(ctx context.Context, in *CreateAdministratorReq, opts ...grpc.CallOption) (*Administrator, error) {
	out := new(Administrator)
	err := c.cc.Invoke(ctx, Admin_CreateAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAdministrator(ctx context.Context, in *UpdateAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_UpdateAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RecoverAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_RecoverAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ForbidAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_ForbidAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ApproveAdministrator(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_ApproveAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoleAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleAllRes, error) {
	out := new(GetRoleAllRes)
	err := c.cc.Invoke(ctx, Admin_GetRoleAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, Admin_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRole(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetRolesForUser(ctx context.Context, in *SetRolesForUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_SetRolesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...grpc.CallOption) (*GetRolesForUserRes, error) {
	out := new(GetRolesForUserRes)
	err := c.cc.Invoke(ctx, Admin_GetRolesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUsersForRole(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetUsersForRoleRes, error) {
	out := new(GetUsersForRoleRes)
	err := c.cc.Invoke(ctx, Admin_GetUsersForRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteRoleForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteRolesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPolicies(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetPoliciesRes, error) {
	out := new(GetPoliciesRes)
	err := c.cc.Invoke(ctx, Admin_GetPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_UpdatePolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetApiAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApiAllRes, error) {
	out := new(GetApiAllRes)
	err := c.cc.Invoke(ctx, Admin_GetApiAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetApiList(ctx context.Context, in *GetApiListReq, opts ...grpc.CallOption) (*GetApiListRes, error) {
	out := new(GetApiListRes)
	err := c.cc.Invoke(ctx, Admin_GetApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateApi(ctx context.Context, in *CreateApiReq, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, Admin_CreateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_UpdateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteApi(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, Admin_GetMenuAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, Admin_GetMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, Admin_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoleMenuTree(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, Admin_GetRoleMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoleMenu(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, Admin_GetRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetRoleMenu(ctx context.Context, in *SetRoleMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_SetRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnReq, opts ...grpc.CallOption) (*GetRoleMenuBtnRes, error) {
	out := new(GetRoleMenuBtnRes)
	err := c.cc.Invoke(ctx, Admin_GetRoleMenuBtn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetRoleMenuBtn(ctx context.Context, in *SetRoleMenuBtnReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_SetRoleMenuBtn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetApiLogList(ctx context.Context, in *GetApiLogListReq, opts ...grpc.CallOption) (*GetApiLogListRes, error) {
	out := new(GetApiLogListRes)
	err := c.cc.Invoke(ctx, Admin_GetApiLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetOssStsToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OssStsTokenResponse, error) {
	out := new(OssStsTokenResponse)
	err := c.cc.Invoke(ctx, Admin_GetOssStsToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// -------------------------- 管理员服务 ----------------------------------------//
	// 管理员登陆
	Login(context.Context, *LoginReq) (*LoginRes, error)
	// 管理员退出
	LoginOut(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 管理员列表
	GetAdministratorList(context.Context, *GetAdministratorListReq) (*GetAdministratorListPageRes, error)
	// 管理员详情
	GetAdministrator(context.Context, *IdReq) (*Administrator, error)
	// 获取当前请求管理员信息
	GetAdministratorInfo(context.Context, *emptypb.Empty) (*Administrator, error)
	// 管理员创建
	CreateAdministrator(context.Context, *CreateAdministratorReq) (*Administrator, error)
	// 管理员更新
	UpdateAdministrator(context.Context, *UpdateAdministratorReq) (*emptypb.Empty, error)
	// 管理员删除
	DeleteAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// 管理员恢复
	RecoverAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// 管理员禁用
	ForbidAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// 管理员解禁
	ApproveAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// -------------------------- 权限服务 ----------------------------------------//
	// 权限 —— 角色列表
	GetRoleAll(context.Context, *emptypb.Empty) (*GetRoleAllRes, error)
	// 权限 —— 角色创建
	CreateRole(context.Context, *CreateRoleReq) (*Role, error)
	// 权限 —— 角色更新
	UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error)
	// 权限 —— 角色删除
	DeleteRole(context.Context, *IdReq) (*emptypb.Empty, error)
	// 权限 —— 设置用户角色关系
	SetRolesForUser(context.Context, *SetRolesForUserReq) (*emptypb.Empty, error)
	// 权限 —— 获取用户角色列表
	GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserRes, error)
	// 权限 —— 获取角色用户列表
	GetUsersForRole(context.Context, *RoleNameReq) (*GetUsersForRoleRes, error)
	// 权限 —— 删除用户某个角色
	DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*emptypb.Empty, error)
	// 权限 —— 删除用户所有角色
	DeleteRolesForUser(context.Context, *DeleteRolesForUserReq) (*emptypb.Empty, error)
	// 策略授权规则 - 列表
	GetPolicies(context.Context, *RoleNameReq) (*GetPoliciesRes, error)
	// 权限 —— 策略授权规则 - 更新
	UpdatePolicies(context.Context, *UpdatePoliciesReq) (*emptypb.Empty, error)
	// 权限 —— 所有Api列表
	GetApiAll(context.Context, *emptypb.Empty) (*GetApiAllRes, error)
	// 权限 —— Api列表
	GetApiList(context.Context, *GetApiListReq) (*GetApiListRes, error)
	// 权限 —— Api创建
	CreateApi(context.Context, *CreateApiReq) (*Api, error)
	// 权限 —— Api更新
	UpdateApi(context.Context, *UpdateApiReq) (*emptypb.Empty, error)
	// 权限 —— Api删除
	DeleteApi(context.Context, *IdReq) (*emptypb.Empty, error)
	// 权限 —— 所有Menu列表
	GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	// 权限 —— Menu列表
	GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	// 权限 —— Menu创建
	CreateMenu(context.Context, *CreateMenuReq) (*Menu, error)
	// 权限 —— Menu更新
	UpdateMenu(context.Context, *UpdateMenuReq) (*emptypb.Empty, error)
	// 权限 —— Menu删除
	DeleteMenu(context.Context, *IdReq) (*emptypb.Empty, error)
	// 权限 —— 角色菜单列表树
	GetRoleMenuTree(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	// 权限 —— 角色菜单列表
	GetRoleMenu(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	// 权限 —— 角色菜单更新
	SetRoleMenu(context.Context, *SetRoleMenuReq) (*emptypb.Empty, error)
	// 权限 —— 获取角色菜单按钮列表
	GetRoleMenuBtn(context.Context, *GetRoleMenuBtnReq) (*GetRoleMenuBtnRes, error)
	// 权限 —— 保存角色菜单按钮列表
	SetRoleMenuBtn(context.Context, *SetRoleMenuBtnReq) (*emptypb.Empty, error)
	// -------------------------- 日志服务 ----------------------------------------//
	// 日志 —— 列表
	GetApiLogList(context.Context, *GetApiLogListReq) (*GetApiLogListRes, error)
	// 文件 ——  OSS STSTOKEN 获取
	GetOssStsToken(context.Context, *emptypb.Empty) (*OssStsTokenResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServer) LoginOut(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOut not implemented")
}
func (UnimplementedAdminServer) GetAdministratorList(context.Context, *GetAdministratorListReq) (*GetAdministratorListPageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministratorList not implemented")
}
func (UnimplementedAdminServer) GetAdministrator(context.Context, *IdReq) (*Administrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrator not implemented")
}
func (UnimplementedAdminServer) GetAdministratorInfo(context.Context, *emptypb.Empty) (*Administrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministratorInfo not implemented")
}
func (UnimplementedAdminServer) CreateAdministrator(context.Context, *CreateAdministratorReq) (*Administrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdministrator not implemented")
}
func (UnimplementedAdminServer) UpdateAdministrator(context.Context, *UpdateAdministratorReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdministrator not implemented")
}
func (UnimplementedAdminServer) DeleteAdministrator(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdministrator not implemented")
}
func (UnimplementedAdminServer) RecoverAdministrator(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAdministrator not implemented")
}
func (UnimplementedAdminServer) ForbidAdministrator(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForbidAdministrator not implemented")
}
func (UnimplementedAdminServer) ApproveAdministrator(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAdministrator not implemented")
}
func (UnimplementedAdminServer) GetRoleAll(context.Context, *emptypb.Empty) (*GetRoleAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAll not implemented")
}
func (UnimplementedAdminServer) CreateRole(context.Context, *CreateRoleReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAdminServer) UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAdminServer) DeleteRole(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminServer) SetRolesForUser(context.Context, *SetRolesForUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRolesForUser not implemented")
}
func (UnimplementedAdminServer) GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedAdminServer) GetUsersForRole(context.Context, *RoleNameReq) (*GetUsersForRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (UnimplementedAdminServer) DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (UnimplementedAdminServer) DeleteRolesForUser(context.Context, *DeleteRolesForUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesForUser not implemented")
}
func (UnimplementedAdminServer) GetPolicies(context.Context, *RoleNameReq) (*GetPoliciesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicies not implemented")
}
func (UnimplementedAdminServer) UpdatePolicies(context.Context, *UpdatePoliciesReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (UnimplementedAdminServer) GetApiAll(context.Context, *emptypb.Empty) (*GetApiAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiAll not implemented")
}
func (UnimplementedAdminServer) GetApiList(context.Context, *GetApiListReq) (*GetApiListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiList not implemented")
}
func (UnimplementedAdminServer) CreateApi(context.Context, *CreateApiReq) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedAdminServer) UpdateApi(context.Context, *UpdateApiReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedAdminServer) DeleteApi(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedAdminServer) GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAll not implemented")
}
func (UnimplementedAdminServer) GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTree not implemented")
}
func (UnimplementedAdminServer) CreateMenu(context.Context, *CreateMenuReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAdminServer) UpdateMenu(context.Context, *UpdateMenuReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAdminServer) DeleteMenu(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAdminServer) GetRoleMenuTree(context.Context, *RoleNameReq) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuTree not implemented")
}
func (UnimplementedAdminServer) GetRoleMenu(context.Context, *RoleNameReq) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenu not implemented")
}
func (UnimplementedAdminServer) SetRoleMenu(context.Context, *SetRoleMenuReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleMenu not implemented")
}
func (UnimplementedAdminServer) GetRoleMenuBtn(context.Context, *GetRoleMenuBtnReq) (*GetRoleMenuBtnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuBtn not implemented")
}
func (UnimplementedAdminServer) SetRoleMenuBtn(context.Context, *SetRoleMenuBtnReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleMenuBtn not implemented")
}
func (UnimplementedAdminServer) GetApiLogList(context.Context, *GetApiLogListReq) (*GetApiLogListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiLogList not implemented")
}
func (UnimplementedAdminServer) GetOssStsToken(context.Context, *emptypb.Empty) (*OssStsTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOssStsToken not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LoginOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LoginOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_LoginOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LoginOut(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdministratorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdministratorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdministratorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdministratorList(ctx, req.(*GetAdministratorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdministrator(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdministratorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdministratorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdministratorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdministratorInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdministratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateAdministrator(ctx, req.(*CreateAdministratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdministratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAdministrator(ctx, req.(*UpdateAdministratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteAdministrator(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RecoverAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RecoverAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_RecoverAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RecoverAdministrator(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ForbidAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ForbidAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ForbidAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ForbidAdministrator(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ApproveAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ApproveAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ApproveAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ApproveAdministrator(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoleAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoleAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRoleAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoleAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRole(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRolesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetRolesForUser(ctx, req.(*SetRolesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRolesForUser(ctx, req.(*GetRolesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetUsersForRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUsersForRole(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteRoleForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRoleForUser(ctx, req.(*DeleteRoleForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRolesForUser(ctx, req.(*DeleteRolesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPolicies(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdatePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdatePolicies(ctx, req.(*UpdatePoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetApiAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetApiAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetApiAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetApiAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetApiList(ctx, req.(*GetApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateApi(ctx, req.(*CreateApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateApi(ctx, req.(*UpdateApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteApi(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenuAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenuAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetMenuAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenuAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenuTree(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateMenu(ctx, req.(*CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoleMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoleMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRoleMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoleMenuTree(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoleMenu(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetRoleMenu(ctx, req.(*SetRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoleMenuBtn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMenuBtnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoleMenuBtn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRoleMenuBtn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoleMenuBtn(ctx, req.(*GetRoleMenuBtnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetRoleMenuBtn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleMenuBtnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetRoleMenuBtn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetRoleMenuBtn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetRoleMenuBtn(ctx, req.(*SetRoleMenuBtnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetApiLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetApiLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetApiLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetApiLogList(ctx, req.(*GetApiLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetOssStsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetOssStsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetOssStsToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetOssStsToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "LoginOut",
			Handler:    _Admin_LoginOut_Handler,
		},
		{
			MethodName: "GetAdministratorList",
			Handler:    _Admin_GetAdministratorList_Handler,
		},
		{
			MethodName: "GetAdministrator",
			Handler:    _Admin_GetAdministrator_Handler,
		},
		{
			MethodName: "GetAdministratorInfo",
			Handler:    _Admin_GetAdministratorInfo_Handler,
		},
		{
			MethodName: "CreateAdministrator",
			Handler:    _Admin_CreateAdministrator_Handler,
		},
		{
			MethodName: "UpdateAdministrator",
			Handler:    _Admin_UpdateAdministrator_Handler,
		},
		{
			MethodName: "DeleteAdministrator",
			Handler:    _Admin_DeleteAdministrator_Handler,
		},
		{
			MethodName: "RecoverAdministrator",
			Handler:    _Admin_RecoverAdministrator_Handler,
		},
		{
			MethodName: "forbidAdministrator",
			Handler:    _Admin_ForbidAdministrator_Handler,
		},
		{
			MethodName: "approveAdministrator",
			Handler:    _Admin_ApproveAdministrator_Handler,
		},
		{
			MethodName: "GetRoleAll",
			Handler:    _Admin_GetRoleAll_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Admin_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Admin_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Admin_DeleteRole_Handler,
		},
		{
			MethodName: "SetRolesForUser",
			Handler:    _Admin_SetRolesForUser_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _Admin_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _Admin_GetUsersForRole_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _Admin_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRolesForUser",
			Handler:    _Admin_DeleteRolesForUser_Handler,
		},
		{
			MethodName: "GetPolicies",
			Handler:    _Admin_GetPolicies_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _Admin_UpdatePolicies_Handler,
		},
		{
			MethodName: "GetApiAll",
			Handler:    _Admin_GetApiAll_Handler,
		},
		{
			MethodName: "GetApiList",
			Handler:    _Admin_GetApiList_Handler,
		},
		{
			MethodName: "CreateApi",
			Handler:    _Admin_CreateApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _Admin_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _Admin_DeleteApi_Handler,
		},
		{
			MethodName: "GetMenuAll",
			Handler:    _Admin_GetMenuAll_Handler,
		},
		{
			MethodName: "GetMenuTree",
			Handler:    _Admin_GetMenuTree_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Admin_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Admin_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Admin_DeleteMenu_Handler,
		},
		{
			MethodName: "GetRoleMenuTree",
			Handler:    _Admin_GetRoleMenuTree_Handler,
		},
		{
			MethodName: "GetRoleMenu",
			Handler:    _Admin_GetRoleMenu_Handler,
		},
		{
			MethodName: "SetRoleMenu",
			Handler:    _Admin_SetRoleMenu_Handler,
		},
		{
			MethodName: "GetRoleMenuBtn",
			Handler:    _Admin_GetRoleMenuBtn_Handler,
		},
		{
			MethodName: "SetRoleMenuBtn",
			Handler:    _Admin_SetRoleMenuBtn_Handler,
		},
		{
			MethodName: "GetApiLogList",
			Handler:    _Admin_GetApiLogList_Handler,
		},
		{
			MethodName: "GetOssStsToken",
			Handler:    _Admin_GetOssStsToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bff-admin/v1/admin.proto",
}
