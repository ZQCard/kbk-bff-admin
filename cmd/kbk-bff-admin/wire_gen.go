// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ZQCard/kbk-bff-admin/internal/conf"
	"github.com/ZQCard/kbk-bff-admin/internal/data"
	"github.com/ZQCard/kbk-bff-admin/internal/server"
	"github.com/ZQCard/kbk-bff-admin/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(env *conf.Env, confServer *conf.Server, confService *conf.Service, confData *conf.Data, registry *conf.Registry, bootstrap *conf.Bootstrap, auth *conf.Auth, endpoint *conf.Endpoint, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	client := data.NewRedisClient(confData)
	discovery := data.NewDiscovery(registry)
	administratorServiceClient := data.NewAdministratorServiceClient(endpoint, discovery, tracerProvider)
	authorizationServiceClient := data.NewAuthorizationServiceClient(auth, endpoint, discovery, tracerProvider)
	logServiceClient := data.NewApiLogClient(endpoint, discovery, tracerProvider)
	fileServiceClient := data.NewFileClient(endpoint, discovery, tracerProvider)
	aiServiceClient := data.NewAIClient(endpoint, discovery, tracerProvider)
	dataData, cleanup, err := data.NewData(bootstrap, client, logger, administratorServiceClient, authorizationServiceClient, logServiceClient, fileServiceClient, aiServiceClient)
	if err != nil {
		return nil, nil, err
	}
	administratorRepo := data.NewAdministratorRepo(dataData, logger)
	authorizationRepo := data.NewAuthorizationRepo(dataData, logger)
	apiLogRepo := data.NewApiLogRepo(dataData, logger)
	fileRepo := data.NewFileRepo(dataData, logger)
	aiRepo := data.NewAIRepo(dataData, logger)
	adminInterface := service.NewAdminInterface(administratorRepo, authorizationRepo, apiLogRepo, fileRepo, logger, aiRepo)
	httpServer := server.NewHTTPServer(confServer, auth, adminInterface, tracerProvider, authorizationServiceClient, logger, logServiceClient, client)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
